.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEM2_VM_RESERVATION_NEW" "3" "2021-09-24" "PMDK - pmem2 API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020-2021, Intel Corporation
.SH NAME
.PP
\f[B]pmem2_vm_reservation_new\f[](),
\f[B]pmem2_vm_reservation_delete\f[]() \- creates or deletes an instance
of virtual memory reservation
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmem2.h>

struct\ pmem2_vm_reservation;
int\ pmem2_vm_reservation_new(struct\ pmem2_vm_reservation\ **rsv_ptr,
\ \ \ \ \ \ \ \ void\ *addr,\ size_t\ size);
int\ pmem2_vm_reservation_delete(struct\ pmem2_vm_reservation\ **rsv_ptr);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmem2_vm_reservation_new\f[]() function creates a new blank
mapping in the virtual address space of the calling process.
Reservation serves as a placeholder of a given size on which sources can
be mapped.
.PP
For the function to succeed, the \f[I]addr\f[] must be either aligned to
an appropriate allocation granularity or \f[B]NULL\f[], the size always
has to be aligned to an appropriate allocation granularity.
.PP
If the \f[B]pmem2_vm_reservation_new\f[]() succeeds in creating a
reservation, it instantiates a new \f[B]struct pmem2_vm_reservation\f[]
object describing the reservation.
The pointer to this object is stored in the user\-provided variable via
the \f[I]rsv_ptr\f[] pointer.
If the function fails, an appropriate error value will be returned.
For a list of possible return values please see RETURN VALUE
.PP
After instantiating an object via the
\f[B]pmem2_vm_reservation_new\f[]() function, it may be disposed of
using the \f[B]pmem2_vm_reservation_delete\f[]() function.
.PP
The \f[B]pmem2_vm_reservation_delete\f[]() function destroys the object
describing the reservation and unmaps virtual memory region the *struct
pmem2_vm_reservation** had assigned during the initialization.
For the delete function to succeed, it is required that the reservation
passed via the \f[I]rsv_ptr\f[] pointer does not contain any mappings.
.SH RETURN VALUE
.PP
The \f[B]pmem2_vm_reservation_new\f[]() and
\f[B]pmem2_vm_reservation_delete\f[]() functions return 0 on success or
a negative error code on failure.
.PP
The function returns 0 on success or a negative error code on failure.
.SH ERRORS
.PP
The \f[B]pmem2_vm_reservation_new\f[]() function can fail with the
following errors:
.IP \[bu] 2
\f[B]PMEM2_E_ADDRESS_UNALIGNED\f[] \- argument \f[I]addr\f[] is not
aligned to the appropriate allocation granularity.
.IP \[bu] 2
\f[B]PMEM2_E_MAPPING_EXISTS\f[] \- mapping already exists in the range
(\f[I]addr\f[], \f[I]addr\f[] + \f[I]size\f[]).
.PP
It can also return \f[B]\-EAGAIN\f[], \f[B]\-ENOMEM\f[] from the
underlying \f[B]mmap\f[](2) function and \f[B]\-ENOMEM\f[] in case of
insufficient memory to allocate an instance of \f[I]struct
pmem2_vm_reservation\f[].
.PP
The \f[B]pmem2_vm_reservation_delete\f[]() function can fail with the
following errors:
.IP \[bu] 2
\f[B]PMEM2_E_RESERVATION_NOT_EMPTY\f[] \- reservation contains mappings.
.PP
It can also return errors from the underlying \f[B]munmap\f[](2)
function.
.SH SEE ALSO
.PP
\f[B]pmem2_config_set_vm_reservation\f[](3), \f[B]libpmem2\f[](7) and
\f[B]<https://pmem.io>\f[]
