.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEM2_VM_RESERVATION_EXTEND" "3" "2021-09-24" "PMDK - pmem2 API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2021, Intel Corporation
.SH NAME
.PP
\f[B]pmem2_vm_reservation_extend\f[](),
\f[B]pmem2_vm_reservation_shrink\f[]() \- extends and shrinks existing
virtual memory reservation
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmem2.h>

struct\ pmem2_vm_reservation;
int\ pmem2_vm_reservation_extend(struct\ pmem2_vm_reservation\ *rsv,\ size_t\ size);
int\ pmem2_vm_reservation_shrink(struct\ pmem2_vm_reservation\ *rsv,\ size_t\ offset,
\ \ \ \ \ \ \ \ size_t\ size);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmem2_vm_reservation_extend\f[]() function extends an existing
virtual memory reservation by the given \f[I]size\f[].
For the function to succeed the size has to be aligned to an appropriate
allocation granularity.
.PP
If the \f[B]pmem2_vm_reservation_extend\f[]() succeeds in extending a
reservation, it provides placeholder virtual memory range that starts
from an address at the end of the old reservation.
Mappings made to the reservation before extending are preserved.
.PP
The \f[B]pmem2_vm_reservation_shrink\f[]() function shrinks the
reservation by a region specified by \f[I]offset\f[] into the
reservation and the \f[I]size\f[].
For the function to succeed the \f[I]size\f[] and \f[I]offset\f[]
variables have to be aligned to an appropriate allocation granularity.
The region formed by \f[I]offset\f[] and \f[I]size\f[] has to belong to
the reservation, be empty and it needs to cover the beggining or the end
of the reservation.
Shrinking reservation from the middle or shrinking the whole reservation
is not supported.
.PP
If the \f[B]pmem2_vm_reservation_shrink\f[]() succeeds in shrinking a
reservation, it releases placeholder virtual memory range that was
designated by \f[I]offset\f[] and \f[I]size\f[] variables.
Mappings made to the reservation before shrinking are preserved.
.PP
If either of those functions fails, reservation will be left as it was
and appropriate error value will be returned.
.SH RETURN VALUE
.PP
The \f[B]pmem2_vm_reservation_extend\f[]() and
\f[B]pmem2_vm_reservation_shrink\f[]() functions return 0 on success or
a negative error code on failure.
.SH ERRORS
.PP
The \f[B]pmem2_vm_reservation_extend\f[]() function can fail with the
following errors:
.IP \[bu] 2
\f[B]PMEM2_E_MAPPING_EXISTS\f[] \- the range that the reservation would
be extended by is already occupied by an existing mapping.
.PP
It can also return \f[B]\-EAGAIN\f[], \f[B]\-ENOMEM\f[] from the
underlying \f[B]mmap\f[](2) function.
.PP
The \f[B]pmem2_vm_reservation_shrink\f[]() function can fail with the
following errors:
.IP \[bu] 2
\f[B]PMEM2_E_OFFSET_UNALIGNED\f[] \- provided offset isn't aligned to an
appropriate allocation granularity.
.IP \[bu] 2
\f[B]PMEM2_E_LENGTH_UNALIGNED\f[] \- provided size isn't aligned to an
appropriate allocation granularity.
.IP \[bu] 2
\f[B]PMEM2_E_OFFSET_OUT_OF_RANGE\f[] \- provided offset is out of
reservation range available to be shrunk.
.IP \[bu] 2
\f[B]PMEM2_E_LENGTH_OUT_OF_RANGE\f[] \- provided size is out of
reservation range available to be shrunk.
.IP \[bu] 2
\f[B]PMEM2_E_NOSUPP\f[] \- interval designated by \f[I]offset\f[] and
\f[I]size\f[] variables covers only the middle or the whole reservation
range.
.IP \[bu] 2
\f[B]PMEM2_VM_RESERVATION_NOT_EMPTY\f[] \- interval designated by
\f[I]offset\f[] and \f[I]size\f[] variable is not empty.
.PP
It can also return \f[B]\-EAGAIN\f[] and \f[B]\-ENOMEM\f[] from the
underlying \f[B]munmap\f[](2) function.
.SH SEE ALSO
.PP
\f[B]pmem2_vm_reservation_new\f[](3),
\f[B]pmem2_config_set_vm_reservation\f[](3), \f[B]libpmem2\f[](7) and
\f[B]<https://pmem.io>\f[]
