.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "LIBPMEM2_UNSAFE_SHUTDOWN" "7" "2021-09-24" "PMDK - pmem2 API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020, Intel Corporation
.SH NAME
.PP
\f[B]libpmem2_unsafe_shutdown\f[] \- libpmem2 unsafe shutdown
.SH DESCRIPTION
.PP
In systems with the persistent memory support, \f[I]a power\-fail
protected domain\f[] covers a set of resources from which the platform
will flush data to the \f[I]a persistent medium\f[] in case of \f[I]a
power\-failure\f[].
Data stored on \f[I]the persistent medium\f[] is preserved across power
cycles.
.PP
The hardware guarantees the feature to flush all data stored in \f[I]the
power\-fail protected domain\f[] to \f[I]the persistent medium\f[].
However, nothing is infallible, and Persistent Memory hardware can
expose a monotonically increasing \f[I]unsafe shutdown counter\f[]
(\f[B]USC\f[]) that is incremented every time a failure of the mechanism
above is detected.
This allows software to discover situations where a running application
was interrupted by a power failure that led to an unsafe shutdown.
Undiscovered unsafe shutdowns might cause silent data corruption.
.RS
.PP
Note: \f[I]The unsafe shutdown\f[] may corrupt data stored on a device,
in a file, in a set of files, and a mapping spanning only a part of a
file.
For the sake of simplicity, all of the above cases will be called
\f[I]file\f[] below.
.RE
.SH UNSAFE SHUTDOWN DETECTION
.PP
Software can detect an unsafe shutdown by watching for the change
between unsafe shutdown count value across application startups.
Any changes can be indicative of unsafe shutdown occurrence.
.PP
Applications can implement a detection mechanism by storing the
\f[B]USC\f[] retrieved from \f[B]pmem2_source_device_usc\f[](3) in
Persistent Memory.
Then, on subsequent startups, the stored value must be compared with a
newly retrieved one.
.PP
However, this detection method can result in false\-positives.
Moving the file to different Persistent Memory devices with possibly
different \f[B]USC\f[] values would lead to false unsafe shutdown
detection.
.PP
Additionally, relying on \f[B]USC\f[] value alone could result in the
detection of unsafe shutdown events that occur when such a shutdown has
no chance of impacting the data used by the application, e.g., when
nothing is actively using the file.
.PP
Applications can avoid false\-positives associated with moving the file
by storing device identification, obtained through
\f[B]pmem2_source_device_id\f[](3), alongside the \f[B]USC\f[].
This enables the software to check if the underlying device has changed,
and reinitialize the stored \f[B]USC\f[] in such cases.
.PP
The second behavior, detection of possibly irrelevant unsafe shutdown
events, if undesirable, can be prevented by storing a flag indicating
whether the file is in use, alongside all the rest of the relevant
information.
.PP
The application should use \f[B]pmem2_deep_flush\f[](3) when storing any
data related to unsafe shutdown detection for higher reliability.
This helps ensure that the detection mechanism is not reliant on the
correct functioning of the same hardware features it is designed to
safeguard.
.PP
General\-purpose software should not assume the presence of \f[B]USC\f[]
on the platform, and should instead appropriately handle any
\f[I]PMEM2_E_NOSUPP\f[] it encounters.
Doing otherwise might cause the software to be unnecessarily restrictive
about the hardware it supports and would prevent, e.g., testing on
emulated PMEM.
.SH SEE ALSO
.PP
\f[B]pmem2_deep_flush\f[](3), \f[B]pmem2_persist_fn\f[](3),
\f[B]pmem2_source_device_id\f[](3), \f[B]pmem2_source_device_usc\f[](3)
and \f[B]<https://pmem.io>\f[]
