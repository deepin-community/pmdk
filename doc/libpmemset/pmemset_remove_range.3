.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_REMOVE_RANGE" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_remove_range\f[]() \- removes mapped parts overlapping with
the provided range
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

struct\ pmemset;
int\ pmemset_remove_range(struct\ pmemset\ *set,\ void\ *addr,\ size_t\ len);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]pmemset_remove_range\f[]() \- removes and unmaps existing parts
that were mapped to the \f[I]set\f[], overlapping with virtual memory
range described by the \f[I]addr\f[] and \f[I]len\f[] variables.
The part mappings residing at the provided range can't be referenced by
any of the threads for this function to succeed.
References acquired using either \f[B]pmemset_first_part_map\f[](3),
\f[B]pmemset_next_part_map\f[](3) or
\f[B]pmemset_part_map_by_address\f[](3) can be dropped with
\f[B]pmemset_part_map_drop\f[](3) function.
.PP
This function will work even if the part mappings contain underlying
coalesced parts.
It means that if the part map consists of two coalesced parts and the
provided range intersects only with one of those parts, then only the
intersected part will be removed.
For more information about coalesced part mappings see
\f[B]pmemset_set_contiguous_part_coalescing(3)\f[].
.SH RETURN VALUE
.PP
The \f[B]pmemset_remove_range\f[]() function returns 0 on success or a
negative error code on failure.
.SH ERRORS
.PP
The \f[B]pmemset_remove_range\f[]() function can fail with the following
errors:
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_FIND_PART_MAP\f[] \- provided range doesn't
overlap with any part mapping stored in the pmemset
.IP \[bu] 2
\f[B]PMEMSET_E_PART_MAP_POSSIBLE_USE_AFTER_DROP\f[] \- part mapping
residing at the provided range is referenced by some thread
.PP
It can also return errors from the underlying
\f[B]pmem2_map_delete\f[](3) function from the \f[B]libpmem2\f[](7)
library.
.SH SEE ALSO
.PP
\f[B]pmem2_map_delete\f[](3), \f[B]pmemset_first_part_map\f[](3),
\f[B]pmemset_next_part_map\f[](3),
\f[B]pmemset_part_map_by_address\f[](3),
\f[B]pmemset_part_map_drop\f[](3),
\f[B]pmemset_set_contiguous_part_coalescing(3)\f[],
\f[B]libpmem2\f[](7), \f[B]libpmemset\f[](7) and
\f[B]<http://pmem.io>\f[]
