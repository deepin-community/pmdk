.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_PART_MAP" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_part_map\f[]() \- creates a part mapping
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

struct\ pmemset_extras;
struct\ pmemset_part;
struct\ pmemset_part_descriptor;
struct\ pmemset_source;
int\ pmemset_part_map(struct\ pmemset_part\ **part_ptr,
\ \ \ \ \ \ \ \ struct\ pmemset_extras\ *extra,
\ \ \ \ \ \ \ \ struct\ pmemset_part_descriptor\ *desc);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemset_part_map\f[]() function creates new part mapping in the
virtual address space of the calling process and adds structure
describing this mapping to the pmemset.
It requires an address of a pointer to initialized part provided in the
\f[I]part_ptr\f[] parameter.
A part can be created using \f[B]pmemset_part_new\f[](3) function.
The mapping can later be retrieved using
\f[B]pmemset_first_part_map\f[](3), \f[B]pmemset_next_part_map\f[](3)
and \f[B]pmemset_part_map_by_address\f[](3) functions.
.PP
Optionally \f[B]pmemset_part_map\f[]() function can take a part
descriptor object passed via \f[I]desc\f[] parameter.
If an optional descriptor was provided then address and size of the part
mapping are stored in the descriptor when this function succeeds.
.PP
Before the initialization of pmemset, a virtual memory reservation can
be set in its configuration.
This limits the future part mappings of initialized pmemset to the
virtual address space spanned by the provided reservation.
Provided reservation's address and size will not be changed on pmemset
operations.
For more information about this configuration please see
\f[B]pmemset_config_set_reservation\f[](3).
.PP
During the lifespan of initialized pmemset, a contiguous part coalescing
feature value can be set using
\f[B]pmemset_set_contiguous_part_coalescing\f[]() function, modifying
the default behavior of part mapping.
With contiguous part coalescing feature enabled,
\f[B]pmemset_part_map\f[]() function tries to map each new part at the
virtual memory region that is situated right after the previous mapped
part memory range.
.PP
When the \f[B]pmemset_part_map\f[]() function succeeds it consumes the
part thereby deleting it and the variable pointed by \f[I]part_ptr\f[]
is set to NULL.
.SH RETURN VALUE
.PP
The \f[B]pmemset_part_map\f[]() function returns 0 on success or a
negative error code on failure.
.SH ERRORS
.PP
The \f[B]pmemset_part_map\f[]() can fail with the following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_ALLOCATE_INTERNAL_STRUCTURE\f[] \- an internal
structure needed by the function cannot be allocated.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_OFFSET_VALUE\f[] \- the offset value assigned to
the part is invalid.
Offset value is bigger than INT64_MAX.
.IP \[bu] 2
\f[B]PMEMSET_E_GRANULARITY_NOT_SUPPORTED\f[] \- the granularity stored
in the provided part \f[I]part_ptr\f[] is invalid.
The concept of granularity is explained in \f[B]libpmem2\f[](7) manpage.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_PMEM2_MAP\f[] \- the pmem2 mapping that pmemset
mapping relies on cannot be created.
The error code of \f[B]libpmem2\f[](7) error is printed in the logs and
can be checked for further information.
.IP \[bu] 2
\f[B]PMEMSET_E_LENGTH_UNALIGNED\f[] \- the length of the part to be
mapped is not aligned to the allocation granularity.
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_COALESCE_PARTS\f[] \- new part couldn't be
coalesced with previously mapped part in the pmemset.
The memory range after the ending address of previous mapped part is
occupied.
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_TRUNCATE_SOURCE_FILE\f[] \- in case of
\f[B]pmemset_source_from_temporary\f[](3) or
\f[B]pmemset_xsource_from_file\f[](3)
\f[I]PMEMSET_SOURCE_FILE_TRUNCATE_IF_NEEDED\f[] flag, temporary file
created in \f[I]dir\f[] cannot be truncated for the defined part size
and offset.
.IP \[bu] 2
\f[B]\-ENOMEM\f[] in case of insufficient memory to allocate an instance
of \f[I]struct pmemset_part_map\f[].
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_FIT_PART_MAP\f[] \- in case of pmemset created
from config with a reservation set, provided reservation has no space
for a new part mapping
.SH SEE ALSO
.PP
\f[B]pmemset_config_set_reservation\f[](3),\f[B]pmemset_first_part_map\f[](3),
\f[B]pmemset_next_part_map\f[](3),
\f[B]pmemset_part_map_by_address\f[](3), \f[B]pmemset_part_new\f[](3),
\f[B]pmemset_set_contiguous_part_coalescing\f[](3),
\f[B]pmemset_source_from_temporary\f[](3),
\f[B]pmemset_xsource_from_file\f[](3), \f[B]libpmemset\f[](7),
\f[B]libpmem2\f[](7) and \f[B]<http://pmem.io>\f[]
