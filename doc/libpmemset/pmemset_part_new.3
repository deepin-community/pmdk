.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_PART_NEW" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020-2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_part_new\f[](), \f[B]pmemset_part_delete\f[]() \- create
and delete structure for a part object
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

struct\ pmemset;
struct\ pmemset_part;
struct\ pmemset_source;
int\ pmemset_part_new(struct\ pmemset_part\ **part,\ struct\ pmemset\ *set,
\ \ \ \ \ \ \ \ struct\ pmemset_source\ *src,\ size_t\ offset,\ size_t\ length);
int\ pmemset_part_delete(struct\ pmemset_part\ **part);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemset_part_new\f[]() creates new part based on the set
specified in the \f[I]*set\f[] pointer.
This function requires a data source \f[I]source\f[].
.PP
For the operation to succeed the \f[I]src\f[] structure must be created
from a valid data source.
See \f[B]pmemset_source_from_file\f[](3) and
\f[B]pmemset_source_from_pmem2\f[](3) for possible sources.
.PP
If the \f[B]pmemset_part_new\f[]() function succeeds in creating a new
part it instantiates a new *struct pmemset_part** object describing the
part.
The pointer to this newly created object is stored in the user\-provided
variable passed via the \f[I]part\f[] pointer.
If the mapping fails the variable pointed by \f[I]part\f[] will contain
a NULL value and appropriate error value will be returned.
For a list of possible return values please see RETURN VALUE.
.PP
The \f[B]pmemset_part_delete\f[]() function frees \f[I]*part\f[]
returned by \f[B]pmemset_part_new\f[]() and sets \f[I]*part\f[] to NULL.
.SH RETURN VALUE
.PP
The \f[B]pmemset_part_new\f[]() function returns 0 on success or a
negative error code on failure.
.PP
The \f[B]pmemset_part_delete\f[]() function always returns 0.
.SH ERRORS
.PP
The \f[B]pmemset_part_new\f[]() can fail with the following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_PMEM2_SOURCE\f[] \- \f[I]pmem2_source\f[] set in
the \f[I]src\f[] structure is invalid.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_PATH\f[] \- the path to the file set in
the provided \f[I]src\f[] structure points to invalid file.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_TYPE\f[] \- the source type in the
provided \f[I]src\f[] isn't recognized.
.IP \[bu] 2
\f[B]\-ENOMEM\f[] in case of insufficient memory to allocate an instance
of \f[I]struct pmemset_part\f[].
.PP
It can also return \f[B]\-EACCES\f[], \f[B]\-EFAULT\f[],
\f[B]\-ELOOP\f[], \f[B]\-ENAMETOOLONG\f[], \f[B]\-ENOMEM\f[],
\f[B]\-ENOTDIR\f[], \f[B]\-EOVERFLOW\f[] from the underlying
\f[B]stat\f[](2) function.
.SH SEE ALSO
.PP
\f[B]stat\f[](2), \f[B]pmemset_source_from_pmem2\f[](),
\f[B]pmemset_source_from_file\f[](3), \f[B]libpmemset\f[](7) and
\f[B]<http://pmem.io>\f[]
