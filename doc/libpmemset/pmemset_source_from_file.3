.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_SOURCE_FROM_FILE" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020-2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_source_from_file\f[]() \- creates an instance of persistent
memory data source
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

int\ pmemset_source_from_file(struct\ pmemset_source\ **src,\ const\ char\ *file);
int\ pmemset_xsource_from_file(struct\ pmemset_source\ **src,\ const\ char\ *file,\ unsigned\ flags);
int\ pmemset_source_delete(struct\ pmemset_source\ **src);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]pmemset_source_from_file\f[]() function instantiates a new *struct
pmemset_source\f[B] object describing the data source and sets a path to
the file in it. \f[]pmemset_xsource_from_file\f[B]() is equivalent to
\f[]pmemset_source_from_file**(), but with additional \f[I]flags\f[]
argument that is a bitmask of the following values:
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_IF_NEEDED\f[] \- a new file will be
created only if the specified file does not already exist,
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_ALWAYS\f[] \- always a new file will be
created.
If the specified file exists, the file will be overwritten,
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_TRUNCATE_IF_NEEDED\f[] \- the specified file
will be truncated during \f[B]pmemset_part_map\f[](3) to designated part
size and offset.
.PP
Obtained source is ready to be passed on to the
\f[B]pmemset_part_new\f[]() function.
See \f[B]pmemset_part_new\f[](3) for details.
.PP
The \f[B]pmemset_source_delete\f[]() function frees \f[I]*src\f[] and
sets \f[I]*src\f[] to NULL.
If \f[I]*src\f[] is NULL, no operation is performed.
.SH RETURN VALUE
.PP
The \f[B]pmemset_source_from_file\f[]() and
\f[B]pmemset_xsource_from_file\f[]() functions return 0 on success or
negative error code on failure.
.PP
The \f[B]pmemset_source_delete\f[]() function always returns 0.
.SH ERRORS
.PP
The \f[B]pmemset_source_from_file\f[]() and
\f[B]pmemset_xsource_from_file\f[]() can fail with the following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_PATH\f[] \- when the provided file path
string is NULL.
.IP \[bu] 2
\f[B]\-ENOMEM\f[] \- in case of insufficient memory to allocate an
instance of \f[I]struct pmemset_source\f[].
.PP
The \f[B]pmemset_xsource_from_file\f[]() can also fail with the error:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_FILE_CREATE_FLAGS\f[] \- in case of
invalid \f[I]flags\f[] parameter.
.SH SEE ALSO
.PP
\f[B]pmemset_part_map\f[](3), \f[B]pmemset_part_new\f[](3),
\f[B]libpmemset\f[](7) and \f[B]<http://pmem.io>\f[]
