.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_PERSIST" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_persist\f[]() \- persist data from the range
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

int\ pmemset_persist(struct\ pmemset\ *set,\ const\ void\ *ptr,\ size_t\ size);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemset_persist\f[]() function efficiently persists data from
\f[I]set\f[] in the range [ptr, ptr + size].
It works on either persistent memory or a memory mapped file on
traditional storage.
The \f[B]pmemset_persist\f[]() function is combination of
\f[B]pmemset_flush\f[](3) and \f[B]pmemset_drain\f[](3) functions and
can be used interchangeably:
.IP
.nf
\f[C]
\ \ \ \ struct\ pmemset\ *set;

\ \ \ \ ...

\ \ \ \ /*\ save\ stores\ durably\ on\ underlying\ medium\ */
\ \ \ \ pmemset_persist(set,\ addr,\ len);
\f[]
.fi
.PP
is an equivalent of:
.IP
.nf
\f[C]
\ \ \ \ struct\ pmemset\ *set;

\ \ \ \ ...

\ \ \ \ /*\ flush\ the\ processor\ caches\ */
\ \ \ \ pmemset_flush(set,\ addr,\ len);

\ \ \ \ /*\ wait\ for\ any\ pmem\ stores\ to\ drain\ from\ HW\ buffers\ */
\ \ \ \ pmemset_drain(set);
\f[]
.fi
.RS
.PP
NOTE: In the underlying implementation \f[B]pmemset_persist\f[]() uses
\f[I]pmem2_persist_fn\f[] returned by
\f[B]pmemset_get_persist_fn\f[](3), so all flush principles are
identical for \f[B]pmemset_persist\f[]() function, and you can find them
in the \f[B]pmem2_get_persist_fn(3)\f[] man page.
.RE
.SH RETURN VALUE
.PP
The \f[B]pmemset_persist\f[]() function always returns 0.
.SH SEE ALSO
.PP
\f[B]pmem2_get_persist_fn\f[](3), \f[B]libpmemset\f[](7),
\f[B]libpmem2\f[](7), and \f[B]<https://pmem.io>\f[]
