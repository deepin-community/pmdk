.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMSET_SET_CONTIGUOUS_PART_COALESCING" "3" "2021-09-24" "PMDK - pmemset API version 1.0" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_set_contiguous_part_coalescing\f[]() \- set part coalescing
feature in the pmemset
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

enum\ pmemset_coalescing;
struct\ pmemset;

int\ pmemset_set_contiguous_part_coalescing(struct\ pmemset\ *set,
\ \ \ \ \ \ \ \ enum\ pmemset_coalescing\ value);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemset_set_contiguous_part_coalescing\f[]() sets part
coalescing feature flag in pmemset to the provided \f[I]value\f[].
The possible values are \f[I]PMEMSET_COALESCING_NONE\f[],
\f[I]PMEMSET_COALESCING_OPPORTUNISTIC\f[] and
\f[I]PMEMSET_COALESCING_FULL\f[].
.PP
When part coalescing is enabled, the \f[B]pmemset_part_map\f[](3)
function will try to coalesce each new mapped part with the previously
mapped part, that means it will try to map the part directly after the
previous mapping.
The behavior of part mapping can be changed by setting one of possible
values in pmemset:
.IP \[bu] 2
\f[I]PMEMSET_COALESCING_NONE\f[] \- default behavior, no new mapped part
will be coalesced, the position of each mapped part in virtual address
space is chosen arbitrarily by the operating system
.IP \[bu] 2
\f[I]PMEMSET_COALESCING_OPPORTUNISTIC\f[] \- each new mapped part will
possibly be coalesced but if it's not possible it will be handled like
with \f[I]PMEMSET_COALESCING_NONE\f[] value set
.IP \[bu] 2
\f[I]PMEMSET_COALESCING_FULL\f[] \- each new mapped part will be
coalesced, if it's not possible the mapping will fail
.PP
Mapping parts contiguously allows modifying the virtual address space of
multiple parts with one operation using for example \f[B]memset\f[](3).
The success of the part coalescing depends on the operating system and
is not guaranteed.
For more information see \f[B]pmemset_part_map\f[](3).
.PP
Coalesced parts appear as single \f[I]struct pmemset_part_map\f[] and
can be retrieved by iterating over the pmemset using
\f[B]pmemset_first_part_map\f[](3) and \f[B]pmemset_next_part_map\f[](3)
or simply by retrieving part by its mapping address with
\f[B]pmemset_part_map_by_address\f[](3) function.
.SH RETURN VALUE
.PP
The \f[B]pmemset_set_contiguous_part_coalescing\f[]() function returns 0
on success or a negative error code on failure.
.SH ERRORS
.PP
The \f[B]pmemset_set_contiguous_part_coalescing\f[]() can fail with the
following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_COALESCING_VALUE\f[] \- contiguous part
coalescing value not one of the possible values.
.SH SEE ALSO
.PP
\f[B]pmemset_first_part_map\f[](3), \f[B]pmemset_next_part_map\f[](3),
\f[B]pmemset_part_map(3)\f[], \f[B]pmemset_part_map_by_address\f[](3),
\f[B]libpmemset\f[](7) and \f[B]<http://pmem.io>\f[]
