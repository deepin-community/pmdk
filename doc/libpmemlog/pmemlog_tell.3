.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "PMEMLOG_TELL" "3" "2021-09-24" "PMDK - pmemlog API version 1.1" "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2017-2018, Intel Corporation
.SH NAME
.PP
\f[B]pmemlog_tell\f[](), \f[B]pmemlog_rewind\f[](),
\f[B]pmemlog_walk\f[]() \- checks current write point for the log or
walks through the log
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemlog.h>

long\ long\ pmemlog_tell(PMEMlogpool\ *plp);
void\ pmemlog_rewind(PMEMlogpool\ *plp);
void\ pmemlog_walk(PMEMlogpool\ *plp,\ size_t\ chunksize,
\ \ \ \ int\ (*process_chunk)(const\ void\ *buf,\ size_t\ len,\ void\ *arg),
\ \ \ \ void\ *arg);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemlog_tell\f[]() function returns the current write point for
the log, expressed as a byte offset into the usable log space in the
memory pool.
This offset starts off as zero on a newly\-created log, and is
incremented by each successful append operation.
This function can be used to determine how much data is currently in the
log.
.PP
The \f[B]pmemlog_rewind\f[]() function resets the current write point
for the log to zero.
After this call, the next append adds to the beginning of the log.
.PP
The \f[B]pmemlog_walk\f[]() function walks through the log \f[I]plp\f[],
from beginning to end, calling the callback function
\f[I]process_chunk\f[] for each \f[I]chunksize\f[] block of data found.
The argument \f[I]arg\f[] is also passed to the callback to help avoid
the need for global state.
The \f[I]chunksize\f[] argument is useful for logs with fixed\-length
records and may be specified as 0 to cause a single call to the callback
with the entire log contents passed as the \f[I]buf\f[] argument.
The \f[I]len\f[] argument tells the \f[I]process_chunk\f[] function how
much data \f[I]buf\f[] is holding.
The callback function should return 1 if \f[B]pmemlog_walk\f[]() should
continue walking through the log, or 0 to terminate the walk.
The callback function is called while holding \f[B]libpmemlog\f[](7)
internal locks that make calls atomic, so the callback function must not
try to append to the log itself or deadlock will occur.
.SH RETURN VALUE
.PP
On success, \f[B]pmemlog_tell\f[]() returns the current write point for
the log.
On error, it returns \-1 and sets \f[I]errno\f[] appropriately.
.PP
The \f[B]pmemlog_rewind\f[]() and \f[B]pmemlog_walk\f[]() functions
return no value.
.SH SEE ALSO
.PP
\f[B]libpmemlog\f[](7) and \f[B]<https://pmem.io>\f[]
